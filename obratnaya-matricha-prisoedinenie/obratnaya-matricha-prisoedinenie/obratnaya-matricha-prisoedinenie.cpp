// obratnaya-matricha-prisoedinenie.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
#include <iostream>

using namespace std;

const int n = 4; // размерность матрицы

// Функция для вывода матрицы
void printMatrix(double A[n][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << A[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    setlocale(LC_ALL, "Russian"); double B[n][n] = {
    { -1,  -1, 2,  1},
    {1, 0,  -1, -1},
    { -1,  -3, 3,  1},
    {2, 4,  -4,  -3} 
    };

    double A[n][2 * n]; // расширенная матрица
    double C[n][n]; // матрица присоединения

    // Заполнение расширенной матрицы
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            A[i][j] = B[i][j];
        }
        for (int j = n; j < 2 * n; j++) {
            A[i][j] = (i == j - n) ? 1 : 0; // единичная матрица справа от B
        }
    }

    // Прямой ход метода Гаусса для преобразования расширенной матрицы к треугольному виду
    for (int k = 0; k < n - 1; k++) {
        for (int i = k + 1; i < n; i++) {
            double factor = A[i][k] / A[k][k]; // коэффициент преобразования
            for (int j = k + 1; j < 2 * n; j++) {
                A[i][j] -= factor * A[k][j]; // вычитание из i-й строки k-й строки, умноженной на коэффициент
            }
            A[i][k] = 0; // обнуление элемента, находящегося под главной диагональю
        }
    }

    // Обратный ход метода Гаусса для получения матрицы присоединения
    for (int i = n - 1; i > 0; i--) {
        for (int k = i - 1; k >= 0; k--) {
            double factor = A[k][i] / A[i][i]; // коэффициент преобразования
            for (int j = i; j < 2 * n; j++) {
                A[k][j] -= factor * A[i][j]; // вычитание из k-й строки i-й строки, умноженной на коэффициент
            }
        }
    }

    // Нормировка матрицы присоединения
    //Нормировка матрицы присоединения в данной программе необходима для проверки корректности 
    //решения задачи. Если результатом нормировки является единичная матрица, то можно сделать 
    //вывод, что найденная матрица присоединения C является обратной к матрице B, а значит, 
    //матрица B имеет обратную матрицу. Если результат нормировки не является единичной матрицей, 
    //то это говорит о том, что решение задачи выполнено некорректно.




    for (int i = 0; i < n; i++) {
        double factor = A[i][i]; // Записываем диагональный элемент A[i][i]
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j + n] / factor; // Нормируем элементы матрицы присоединения на диагональный элемент
        }
    }

    cout << "Матрица B:" << endl; // Выводим исходную матрицу
    printMatrix(B);

    cout << "Матрица присоединения:" << endl; // Выводим матрицу присоединения
    printMatrix(C);

    return 0; // Завершаем программу
}

// Нормировка матрицы присоединения заключается в том, что каждый элемент матрицы C делится на диагональный 
//элемент матрицы A, находящийся на соответствующей позиции. Это позволяет получить единичную матрицу на месте
//матрицы B, что является признаком того, что матрица B имеет обратную матрицу.